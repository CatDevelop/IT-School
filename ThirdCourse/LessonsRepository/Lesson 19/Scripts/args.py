# Скрипт для демонстрации распаковки позиционных аргументов при вызовах функций
# Использует функцию area_heron() из модуля triangle.py
from triangle import area_heron

# что если возникает необходимость вычислить площадь треугольника, а длины всех его сторон хранятся в списке?
# мы могли бы вызвать функцию так: area_heron(sides[0], sides[1], sides[2]), но можно сократить вызов
sides = [3, 8, 5]
area_heron(*sides)

# можно также использовать оператор распаковывания последовательности в списке параметров функции
# функция product() вычисляет произведение всех своих аргументов, количество которых заранее неизвестно
def product(*args):
    result = 1
    # внутри функции параметр args обретает форму кортежа, значениями элементов 
    # которого будут значения переданных аргументов:
    for arg in args:
        result *= arg
    return result

# можно использовать именованные аргументы вслед за неограниченным списком позиционных
def sum_of_powers(*args, power=1):
    result = 0
    for arg in args:
        result += arg ** power
    return result

# примеры вызова sum_of_powers():
sum_of_powers(1, 3, 5)
sum_of_powers(1, 3, 5, power=2)

# можно использовать символ * в качестве самостоятельного «параметра»
# это означает, что после * не может быть других позиционных параметров, 
# однако указание именованных аргументов допускается
def heron2(a, b, c, *, units="meters"):
    area = area_heron(a, b, c)
    return "{0} {1}".format(area, units)

# примеры вызова heron2():
heron2(25, 24, 7) # вернет: '84.0 meters'
heron2(41, 9, 40, units="inches") # вернет: '180.0 inches'
heron2(25, 24, 7, "inches") # ОШИБКА! Возбудит исключение TypeError
